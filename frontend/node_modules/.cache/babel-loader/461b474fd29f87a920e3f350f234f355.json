{"ast":null,"code":"var _jsxFileName = \"/Users/alexisyouf/Documents/MonRepoGit/PROJECT_WEB_OCRES/frontend/src/js/Apitest.js\";\nimport React from 'react';\nimport { city } from '../composants/Settings';\nconst API_URL = \"https://goweather.herokuapp.com/weather\";\n\nclass Apitest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"\".concat(API_URL, \"/&\").concat(city)).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result[\"temperature\"]\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          error = _this$state.error,\n          isLoaded = _this$state.isLoaded,\n          items = _this$state.items;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, items, \" Celcus blabla\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"La ville est : \", city));\n    }\n  }\n\n}\n\nexport default Apitest;","map":{"version":3,"sources":["/Users/alexisyouf/Documents/MonRepoGit/PROJECT_WEB_OCRES/frontend/src/js/Apitest.js"],"names":["React","city","API_URL","Apitest","Component","constructor","props","state","error","isLoaded","items","componentDidMount","fetch","then","res","json","result","setState","render","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAsB,wBAAtB;AAEA,MAAMC,OAAO,GAAG,yCAAhB;;AAGA,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,WAAIV,OAAJ,eAAgBD,IAAhB,EAAL,CAGGY,IAHH,CAGQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHf,EAIGF,IAJH,CAKKG,MAAD,IAAY;AACV,WAAKC,QAAL,CAAc;AACZR,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,KAAK,EAAEM,MAAM,CAAC,aAAD;AAFD,OAAd;AAID,KAVL,EAWI;AACA;AACA;AACCR,IAAAA,KAAD,IAAW;AACT,WAAKS,QAAL,CAAc;AACZR,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAnBL;AAqBD;;AAEDU,EAAAA,MAAM,GAAG;AAAA,wBAC4B,KAAKX,KADjC;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,QADR,eACQA,QADR;AAAA,UACkBC,KADlB,eACkBA,KADlB;;AAEP,QAAIF,KAAJ,EAAW;AACT,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaA,KAAK,CAACW,OAAnB,CAAP;AACD,KAFD,MAEO,IAAI,CAACV,QAAL,EAAe;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAFM,MAEA;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,KAAL,mBADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAoBT,IAApB,CAFD,CADF;AAOD;AACF;;AAjDiC;;AAoDpC,eAAeE,OAAf","sourcesContent":["import React from 'react';\nimport { city }  from '../composants/Settings';\n\nconst API_URL = \"https://goweather.herokuapp.com/weather\";\n\n\nclass Apitest extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        items: []\n      };\n    }\n    \n    componentDidMount() {\n      fetch(`${API_URL}/&${city}`)\n      \n      \n        .then(res => res.json())\n        .then(\n          (result) => {\n            this.setState({\n              isLoaded: true,\n              items: result[\"temperature\"]\n            });\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n    }\n  \n    render() {\n      const { error, isLoaded, items } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <ul>\n           <li>{items} Celcus blabla</li>\n           <li>La ville est : {city}</li>\n          </ul>\n          \n        );\n      }\n    }\n  }\n\n  export default Apitest; "]},"metadata":{},"sourceType":"module"}